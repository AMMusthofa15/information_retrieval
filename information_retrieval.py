# -*- coding: utf-8 -*-
"""Information_retrieval.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mSRuUPAkVyIshwZhs-yE8nLP-Cjs94zE
"""

pip install numpy pandas scikit-learn pymupdf

import fitz  # PyMuPDF

# Fungsi untuk membaca teks dari PDF
def read_pdf(file_path):
    doc = fitz.open(file_path)
    texts = []
    for page_num in range(doc.page_count):
        page = doc.load_page(page_num)
        text = page.get_text()
        texts.append(text)
    return texts

# Memuat dokumen dari file PDF
pdf_path = '/content/buku.pdf'
documents = read_pdf(pdf_path)

# Menampilkan jumlah dokumen yang berhasil dibaca
print(f"Jumlah halaman yang berhasil dibaca: {len(documents)}")

from sklearn.feature_extraction.text import TfidfVectorizer

# Inisialisasi TfidfVectorizer
vectorizer = TfidfVectorizer(stop_words='english')

# Fit dan transform dokumen ke dalam vektor TF-IDF
tfidf_matrix = vectorizer.fit_transform(documents)

# Menampilkan bentuk matriks TF-IDF
print(f"Bentuk matriks TF-IDF: {tfidf_matrix.shape}")

from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

# Fungsi untuk mencari dokumen yang paling relevan dengan kueri
def search(query, top_n=5):
    query_vec = vectorizer.transform([query])
    similarity = cosine_similarity(query_vec, tfidf_matrix).flatten()
    top_doc_indices = similarity.argsort()[-top_n:][::-1]
    return [(documents[i], similarity[i]) for i in top_doc_indices]

# Contoh kueri
query = "RAM & ROM"
top_documents = search(query)

# Menampilkan hasil
for i, (doc, score) in enumerate(top_documents):
    print(f"Rank {i+1}: (Score: {score})")
    print(doc[:500])  # Menampilkan 500 karakter pertama dari dokumen
    print("\n")

import fitz  # PyMuPDF
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Fungsi untuk membaca teks dari PDF
def read_pdf(file_path):
    doc = fitz.open(file_path)
    texts = []
    for page_num in range(doc.page_count):
        page = doc.load_page(page_num)
        text = page.get_text()
        texts.append(text)
    return texts

# Memuat dokumen dari file PDF
pdf_path = '/content/buku.pdf'
documents = read_pdf(pdf_path)

# Inisialisasi TfidfVectorizer
vectorizer = TfidfVectorizer(stop_words='english')

# Fit dan transform dokumen ke dalam vektor TF-IDF
tfidf_matrix = vectorizer.fit_transform(documents)

# Fungsi untuk mencari dokumen yang paling relevan dengan kueri
def search(query, top_n=5):
    query_vec = vectorizer.transform([query])
    similarity = cosine_similarity(query_vec, tfidf_matrix).flatten()
    top_doc_indices = similarity.argsort()[-top_n:][::-1]
    return [(documents[i], similarity[i]) for i in top_doc_indices]

# Contoh kueri
query = "RAM & ROM"
top_documents = search(query)

# Menampilkan hasil
for i, (doc, score) in enumerate(top_documents):
    print(f"Rank {i+1}: (Score: {score})")
    print(doc[:500])  # Menampilkan 500 karakter pertama dari dokumen
    print("\n")